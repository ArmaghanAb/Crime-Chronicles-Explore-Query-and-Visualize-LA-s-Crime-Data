{"ast":null,"code":"// import React, { useState } from 'react';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// function ChartComponent({ chartData, chartType }) {\n//   const [key, setKey] = useState(0); // Add a key to force reinitialization of the chart\n\n//   const getChartOptions = () => ({\n//     chart: {\n//       type: chartType, // Use chartType directly\n//       animation: false, // Disable transition animation when chart type changes\n//     },\n//     title: {\n//       text: chartData.title, // Title from chartData\n//     },\n//     xAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//       categories: chartData.labels,\n//     } : undefined,\n//     yAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//       title: {\n//         text: 'Crime Count',\n//       },\n//     } : undefined,\n//     series: [{\n//       name: chartType === 'pie' ? 'Crime Type' : 'Crime Count', // Series name changes based on chartType\n//       data: chartType === 'pie'\n//         ? chartData.labels.map((label, index) => ({\n//             name: label,\n//             y: chartData.datasets[0].data[index],\n//           }))\n//         : chartData.datasets[0].data, // For bar/line, use raw data\n//     }],\n//     plotOptions: {\n//       series: {\n//         animation: { duration: 1000 }, // Animate data points when chart is rendered\n//       },\n//     },\n//   });\n\n//   // Force chart reinitialization when chartType changes\n//   React.useEffect(() => {\n//     setKey((prevKey) => prevKey + 1); // Increment key to trigger re-render\n//   }, [chartType]);\n\n//   return (\n//     <div\n//       style={{\n//         width: '80%',\n//         marginInline: 'auto',\n//         borderRadius: '15px',\n//         overflow: 'hidden',\n//         border: 'solid 2px #272626',\n//         padding: '1rem',\n//       }}\n//     >\n//       <HighchartsReact\n//         highcharts={Highcharts}\n//         options={getChartOptions()}\n//         key={key} // Use the key to force HighchartsReact to reinitialize\n//       />\n//     </div>\n//   );\n// }\n\n// export default ChartComponent;","map":{"version":3,"names":[],"sources":["/Users/akashvegada/Desktop/Masters/sem3/cmpe280/Project/CrimeChronicles/Crime-Chronicles-Explore-Query-and-Visualize-LA-s-Crime-Data/src/components/ChartComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// function ChartComponent({ chartData, chartType }) {\n//   const [key, setKey] = useState(0); // Add a key to force reinitialization of the chart\n\n//   const getChartOptions = () => ({\n//     chart: {\n//       type: chartType, // Use chartType directly\n//       animation: false, // Disable transition animation when chart type changes\n//     },\n//     title: {\n//       text: chartData.title, // Title from chartData\n//     },\n//     xAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//       categories: chartData.labels,\n//     } : undefined,\n//     yAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//       title: {\n//         text: 'Crime Count',\n//       },\n//     } : undefined,\n//     series: [{\n//       name: chartType === 'pie' ? 'Crime Type' : 'Crime Count', // Series name changes based on chartType\n//       data: chartType === 'pie'\n//         ? chartData.labels.map((label, index) => ({\n//             name: label,\n//             y: chartData.datasets[0].data[index],\n//           }))\n//         : chartData.datasets[0].data, // For bar/line, use raw data\n//     }],\n//     plotOptions: {\n//       series: {\n//         animation: { duration: 1000 }, // Animate data points when chart is rendered\n//       },\n//     },\n//   });\n\n//   // Force chart reinitialization when chartType changes\n//   React.useEffect(() => {\n//     setKey((prevKey) => prevKey + 1); // Increment key to trigger re-render\n//   }, [chartType]);\n\n//   return (\n//     <div\n//       style={{\n//         width: '80%',\n//         marginInline: 'auto',\n//         borderRadius: '15px',\n//         overflow: 'hidden',\n//         border: 'solid 2px #272626',\n//         padding: '1rem',\n//       }}\n//     >\n//       <HighchartsReact\n//         highcharts={Highcharts}\n//         options={getChartOptions()}\n//         key={key} // Use the key to force HighchartsReact to reinitialize\n//       />\n//     </div>\n//   );\n// }\n\n// export default ChartComponent;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}