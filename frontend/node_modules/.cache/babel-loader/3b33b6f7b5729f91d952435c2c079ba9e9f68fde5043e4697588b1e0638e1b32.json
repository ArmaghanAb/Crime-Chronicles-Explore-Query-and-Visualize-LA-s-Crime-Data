{"ast":null,"code":"var _jsxFileName = \"/Users/akashvegada/Desktop/Masters/sem3/cmpe280/Project/CrimeChronicles/Crime-Chronicles-Explore-Query-and-Visualize-LA-s-Crime-Data/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// function ChartComponent({ chartData, chartType }) {\n\n// const getChartOptions = () => {\n//     // const animationSettings = {\n//     //   duration: 1000, // Duration for transitions\n//     //   easing: 'easeInOutQuad', // Smooth easing\n//     // };\n\n//     return {\n//       chart: {\n//         type: chartType, // Use chartType directly\n//         // animation: animationSettings, // Add animation settings\n//       },\n//       title: {\n//         text: chartData.title, // Title from chartData\n//       },\n//       xAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//         categories: chartData.labels,\n//       } : undefined,\n//       yAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//         title: {\n//           text: 'Crime Count',\n//         },\n//       } : undefined,\n//       series: [{\n//         name: chartType === 'pie' ? 'Crime Type' : 'Crime Count', // Series name changes based on chartType\n//         data: chartType === 'pie'\n//           ? chartData.labels.map((label, index) => ({\n//               name: label,\n//               y: chartData.datasets[0].data[index],\n//             }))\n//           : chartData.datasets[0].data, // For bar/line, use raw data\n//       }],\n//     };\n//   };\n\n//   return (\n//     <div style={{\n//         width: '80%',\n//         marginInline: 'auto',\n//         borderRadius: '15px',\n//         overflow: 'hidden',\n//         border: 'solid 2px #272626', \n//         padding: '1rem',\n//     }}>\n//       <HighchartsReact\n//         highcharts={Highcharts}\n//         options={getChartOptions(chartType)} // Pass the options dynamically based on the selected chart type\n//       />\n//     </div>\n//   );\n// }\n\n// export default ChartComponent;\n\nimport React, { useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartComponent({\n  chartData,\n  chartType\n}) {\n  _s();\n  const [key, setKey] = useState(0); // Add a key to force reinitialization of the chart\n\n  const getChartOptions = () => ({\n    chart: {\n      type: chartType,\n      // Use chartType directly\n      animation: false // Disable transition animation when chart type changes\n    },\n    title: {\n      text: chartData.title // Title from chartData\n    },\n    xAxis: chartType !== 'pie' ? {\n      // Only for non-pie charts\n      categories: chartData.labels\n    } : undefined,\n    yAxis: chartType !== 'pie' ? {\n      // Only for non-pie charts\n      title: {\n        text: 'Crime Count'\n      }\n    } : undefined,\n    series: [{\n      name: chartType === 'pie' ? 'Crime Type' : 'Crime Count',\n      // Series name changes based on chartType\n      data: chartType === 'pie' ? chartData.labels.map((label, index) => ({\n        name: label,\n        y: chartData.datasets[0].data[index]\n      })) : chartData.datasets[0].data // For bar/line, use raw data\n    }],\n    plotOptions: {\n      series: {\n        animation: {\n          duration: 1000\n        } // Animate data points when chart is rendered\n      }\n    }\n  });\n\n  // Force chart reinitialization when chartType changes\n  React.useEffect(() => {\n    setKey(prevKey => prevKey + 1); // Increment key to trigger re-render\n  }, [chartType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '80%',\n      marginInline: 'auto',\n      borderRadius: '15px',\n      overflow: 'hidden',\n      border: 'solid 2px #272626',\n      padding: '1rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: getChartOptions()\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartComponent, \"IYPkcXl41O+JlGV1m7sUxVH9Exo=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","ChartComponent","chartData","chartType","_s","key","setKey","getChartOptions","chart","type","animation","title","text","xAxis","categories","labels","undefined","yAxis","series","name","data","map","label","index","y","datasets","plotOptions","duration","useEffect","prevKey","style","width","marginInline","borderRadius","overflow","border","padding","children","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akashvegada/Desktop/Masters/sem3/cmpe280/Project/CrimeChronicles/Crime-Chronicles-Explore-Query-and-Visualize-LA-s-Crime-Data/src/components/ChartComponent.js"],"sourcesContent":["// import React from 'react';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// function ChartComponent({ chartData, chartType }) {\n    \n// const getChartOptions = () => {\n//     // const animationSettings = {\n//     //   duration: 1000, // Duration for transitions\n//     //   easing: 'easeInOutQuad', // Smooth easing\n//     // };\n\n//     return {\n//       chart: {\n//         type: chartType, // Use chartType directly\n//         // animation: animationSettings, // Add animation settings\n//       },\n//       title: {\n//         text: chartData.title, // Title from chartData\n//       },\n//       xAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//         categories: chartData.labels,\n//       } : undefined,\n//       yAxis: chartType !== 'pie' ? { // Only for non-pie charts\n//         title: {\n//           text: 'Crime Count',\n//         },\n//       } : undefined,\n//       series: [{\n//         name: chartType === 'pie' ? 'Crime Type' : 'Crime Count', // Series name changes based on chartType\n//         data: chartType === 'pie'\n//           ? chartData.labels.map((label, index) => ({\n//               name: label,\n//               y: chartData.datasets[0].data[index],\n//             }))\n//           : chartData.datasets[0].data, // For bar/line, use raw data\n//       }],\n//     };\n//   };\n\n\n//   return (\n//     <div style={{\n//         width: '80%',\n//         marginInline: 'auto',\n//         borderRadius: '15px',\n//         overflow: 'hidden',\n//         border: 'solid 2px #272626', \n//         padding: '1rem',\n//     }}>\n//       <HighchartsReact\n//         highcharts={Highcharts}\n//         options={getChartOptions(chartType)} // Pass the options dynamically based on the selected chart type\n//       />\n//     </div>\n//   );\n// }\n\n// export default ChartComponent;\n\n\nimport React, { useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction ChartComponent({ chartData, chartType }) {\n  const [key, setKey] = useState(0); // Add a key to force reinitialization of the chart\n\n  const getChartOptions = () => ({\n    chart: {\n      type: chartType, // Use chartType directly\n      animation: false, // Disable transition animation when chart type changes\n    },\n    title: {\n      text: chartData.title, // Title from chartData\n    },\n    xAxis: chartType !== 'pie' ? { // Only for non-pie charts\n      categories: chartData.labels,\n    } : undefined,\n    yAxis: chartType !== 'pie' ? { // Only for non-pie charts\n      title: {\n        text: 'Crime Count',\n      },\n    } : undefined,\n    series: [{\n      name: chartType === 'pie' ? 'Crime Type' : 'Crime Count', // Series name changes based on chartType\n      data: chartType === 'pie'\n        ? chartData.labels.map((label, index) => ({\n            name: label,\n            y: chartData.datasets[0].data[index],\n          }))\n        : chartData.datasets[0].data, // For bar/line, use raw data\n    }],\n    plotOptions: {\n      series: {\n        animation: { duration: 1000 }, // Animate data points when chart is rendered\n      },\n    },\n  });\n\n  // Force chart reinitialization when chartType changes\n  React.useEffect(() => {\n    setKey((prevKey) => prevKey + 1); // Increment key to trigger re-render\n  }, [chartType]);\n\n  return (\n    <div\n      style={{\n        width: '80%',\n        marginInline: 'auto',\n        borderRadius: '15px',\n        overflow: 'hidden',\n        border: 'solid 2px #272626',\n        padding: '1rem',\n      }}\n    >\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={getChartOptions()}\n        key={key} // Use the key to force HighchartsReact to reinitialize\n      />\n    </div>\n  );\n}\n\nexport default ChartComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}