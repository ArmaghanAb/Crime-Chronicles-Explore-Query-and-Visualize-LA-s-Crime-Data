{"ast":null,"code":"var _jsxFileName = \"/Users/akashvegada/Desktop/Masters/sem3/cmpe280/Project/CrimeChronicles/Crime-Chronicles-Explore-Query-and-Visualize-LA-s-Crime-Data/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n// Sample data (you can dynamically fetch this based on the selected chart type)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pieData = [['Crime Type 1', 45], ['Crime Type 2', 30], ['Crime Type 3', 25]];\nconst lineData = [['January', 30], ['February', 40], ['March', 35], ['April', 50], ['May', 60]];\nconst barData = [['Crime Type 1', 20], ['Crime Type 2', 60], ['Crime Type 3', 40]];\nfunction ChartComponent() {\n  _s();\n  const [chartType, setChartType] = useState('pie'); // Default chart type\n\n  const handleChartTypeChange = event => {\n    setChartType(event.target.value);\n  };\n  const getChartOptions = type => {\n    switch (type) {\n      case 'pie':\n        return {\n          chart: {\n            type: 'pie'\n          },\n          title: {\n            text: 'Crime Distribution by Type'\n          },\n          series: [{\n            name: 'Crime Type',\n            data: pieData\n          }]\n        };\n      case 'line':\n        return {\n          chart: {\n            type: 'line'\n          },\n          title: {\n            text: 'Crime Trend Over Months'\n          },\n          xAxis: {\n            categories: lineData.map(item => item[0])\n          },\n          yAxis: {\n            title: {\n              text: 'Crime Count'\n            }\n          },\n          series: [{\n            name: 'Crime Count',\n            data: lineData.map(item => item[1])\n          }]\n        };\n      case 'bar':\n        return {\n          chart: {\n            type: 'bar'\n          },\n          title: {\n            text: 'Crime Count by Type'\n          },\n          xAxis: {\n            categories: barData.map(item => item[0])\n          },\n          yAxis: {\n            title: {\n              text: 'Crime Count'\n            }\n          },\n          series: [{\n            name: 'Crime Count',\n            data: barData.map(item => item[1])\n          }]\n        };\n      default:\n        return {};\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Chart Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"chartType\",\n          value: \"pie\",\n          checked: chartType === 'pie',\n          onChange: handleChartTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), \"Pie\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"chartType\",\n          value: \"line\",\n          checked: chartType === 'line',\n          onChange: handleChartTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), \"Line\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"chartType\",\n          value: \"bar\",\n          checked: chartType === 'bar',\n          onChange: handleChartTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), \"Bar\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: getChartOptions(chartType) // Dynamically get the chart options based on the selected type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartComponent, \"UjmQaXi4ZuMSc6thXBXoFLmo4aQ=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","pieData","lineData","barData","ChartComponent","_s","chartType","setChartType","handleChartTypeChange","event","target","value","getChartOptions","type","chart","title","text","series","name","data","xAxis","categories","map","item","yAxis","children","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","highcharts","options","_c","$RefreshReg$"],"sources":["/Users/akashvegada/Desktop/Masters/sem3/cmpe280/Project/CrimeChronicles/Crime-Chronicles-Explore-Query-and-Visualize-LA-s-Crime-Data/src/components/ChartComponent.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n// Sample data (you can dynamically fetch this based on the selected chart type)\nconst pieData = [\n  ['Crime Type 1', 45],\n  ['Crime Type 2', 30],\n  ['Crime Type 3', 25]\n];\n\nconst lineData = [\n  ['January', 30],\n  ['February', 40],\n  ['March', 35],\n  ['April', 50],\n  ['May', 60]\n];\n\nconst barData = [\n  ['Crime Type 1', 20],\n  ['Crime Type 2', 60],\n  ['Crime Type 3', 40]\n];\n\nfunction ChartComponent() {\n  const [chartType, setChartType] = useState('pie'); // Default chart type\n\n  const handleChartTypeChange = (event) => {\n    setChartType(event.target.value);\n  };\n\n  const getChartOptions = (type) => {\n    switch (type) {\n      case 'pie':\n        return {\n          chart: {\n            type: 'pie',\n          },\n          title: {\n            text: 'Crime Distribution by Type',\n          },\n          series: [{\n            name: 'Crime Type',\n            data: pieData,\n          }],\n        };\n      case 'line':\n        return {\n          chart: {\n            type: 'line',\n          },\n          title: {\n            text: 'Crime Trend Over Months',\n          },\n          xAxis: {\n            categories: lineData.map(item => item[0]),\n          },\n          yAxis: {\n            title: {\n              text: 'Crime Count',\n            },\n          },\n          series: [{\n            name: 'Crime Count',\n            data: lineData.map(item => item[1]),\n          }],\n        };\n      case 'bar':\n        return {\n          chart: {\n            type: 'bar',\n          },\n          title: {\n            text: 'Crime Count by Type',\n          },\n          xAxis: {\n            categories: barData.map(item => item[0]),\n          },\n          yAxis: {\n            title: {\n              text: 'Crime Count',\n            },\n          },\n          series: [{\n            name: 'Crime Count',\n            data: barData.map(item => item[1]),\n          }],\n        };\n      default:\n        return {};\n    }\n  };\n\n  return (\n    <div>\n      <h3>Select Chart Type</h3>\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"chartType\"\n            value=\"pie\"\n            checked={chartType === 'pie'}\n            onChange={handleChartTypeChange}\n          />\n          Pie\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"chartType\"\n            value=\"line\"\n            checked={chartType === 'line'}\n            onChange={handleChartTypeChange}\n          />\n          Line\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"chartType\"\n            value=\"bar\"\n            checked={chartType === 'bar'}\n            onChange={handleChartTypeChange}\n          />\n          Bar\n        </label>\n      </div>\n\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={getChartOptions(chartType)} // Dynamically get the chart options based on the selected type\n      />\n    </div>\n  );\n}\n\nexport default ChartComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}